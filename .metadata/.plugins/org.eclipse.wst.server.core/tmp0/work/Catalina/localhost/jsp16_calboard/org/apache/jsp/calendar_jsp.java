/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
 * Generated at: 2021-01-08 13:25:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.cal.dto.CalDto;
import java.util.List;
import com.cal.dao.CalDao;
import com.cal.dao.Util;
import java.util.Calendar;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.cal.dto.CalDto");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.cal.dao.CalDao");
    _jspx_imports_classes.add("com.cal.dao.Util");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");

      out.write('\r');
      out.write('\n');

	response.setContentType("text/html;charset=UTF-8");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("#calendar {\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("\tborder: 1px solid gray;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#calendar th {\r\n");
      out.write("\twidth: 80px;\r\n");
      out.write("\tborder: 1px solid gray;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#calendar td {\r\n");
      out.write("\twidows: 80px;\r\n");
      out.write("\theight: 80px;\r\n");
      out.write("\tborder: 1px solid gray;\r\n");
      out.write("\ttext-align: left;\r\n");
      out.write("\tvertical-align: top;\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* #calendar tr td{\r\n");
      out.write("\twidth: 80px;\r\n");
      out.write("\theight: 100px;\r\n");
      out.write("\t} */\r\n");
      out.write("a {\r\n");
      out.write("\ttext-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".clist>p {\r\n");
      out.write("\tfont-size: 5px;\r\n");
      out.write("\tmargin: 1px;\r\n");
      out.write("\tbackground-color: skyblue;\r\n");
      out.write("}\r\n");
      out.write(".cpreview{\r\n");
      out.write("position: absolute;\r\n");
      out.write("top:-30px;\r\n");
      out.write("left: 10px;\r\n");
      out.write("background-color: skyblue;\r\n");
      out.write("width: 40px;\r\n");
      out.write("height: 40px;\r\n");
      out.write("text-align: center;\r\n");
      out.write("line-height: 40px;\r\n");
      out.write("border-radius: 40px 40px 40px 1px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\tfunction isTwo(n) {\r\n");
      out.write("\t\treturn (n.length < 2) ? \"0\" + n : n;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\t$(\".countview\").hover(\r\n");
      out.write("\t\t\t\tfunction() {\r\n");
      out.write("\t\t\t\t\tvar aCountView = $(this);//this는 <a>\r\n");
      out.write("\t\t\t\t\tvar year = $(\".y\").text().trim();\r\n");
      out.write("\t\t\t\t\tvar month = $(\".m\").text().trim();\r\n");
      out.write("\t\t\t\t\tvar cDate = aCountView.text().trim();\r\n");
      out.write("\t\t\t\t\tvar yyyyMMdd = year +isTwo(month) + isTwo(cDate);\r\n");
      out.write("\t\t\t\t\t//alert(yyyyMMdd);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\t\ttype : \"POST\", //전송 방식\r\n");
      out.write("\t\t\t\t\t\turl : \"calcountajax.do\", //요청경로\r\n");
      out.write("\t\t\t\t\t\tdata : \"id=kh&yyyyMMdd=\" + yyyyMMdd,//전송 파라미터\r\n");
      out.write("\t\t\t\t\t\tdataType : \"json\",//받는 데이터의 타입\r\n");
      out.write("\t\t\t\t\t\tasync : false,//동기\r\n");
      out.write("\t\t\t\t\t\tsuccess : function(msg) {//제이슨 객체 도착\r\n");
      out.write("\t\t\t\t\t\t\tvar count = msg.count;\r\n");
      out.write("\t\t\t\t\t\t\taCountView.after(\"<div class='cpreview'>\" + count\r\n");
      out.write("\t\t\t\t\t\t\t\t\t+ \"</div>\");\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\terror : function() {\r\n");
      out.write("\t\t\t\t\t\t\talert(\"서버 통신 실패\");\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t}, function() {\r\n");
      out.write("\t\t\t\t\t$(\".cpreview\").remove();\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");

	//싱글 톤 공부하기:한 번 만들면 계속 리턴 된다. 새로 만들어 지지 않는다.
	//new로 객체를 생성할 수 없다.
	Calendar cal = Calendar.getInstance();
	int year = cal.get(Calendar.YEAR);
	int month = cal.get(Calendar.MONTH) + 1;

	String paramYear = request.getParameter("year");
	String paramMonth = request.getParameter("month");

	if (paramYear != null) {
		year = Integer.parseInt(paramYear);
	}
	if (paramMonth != null) {
		month = Integer.parseInt(paramMonth);
	}

	if (month < 1) {
		month = 12;
		year--;
	}

	if (month > 12) {
		month = 1;
		year++;
	}

	//현재 년도, 현재 월, 해당 월의 1일로 셋팅

	cal.set(year, month - 1, 1);

	//1일의 요일
	int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);

	//현재 월의 마지막 일
	int lastDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

	//달력에 일정 표현
	CalDao dao = new CalDao();
	String yyyyMM = year + Util.isTwo(String.valueOf(month));
	List<CalDto> clist = dao.getCalViewList("kh", yyyyMM);

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<table id=\"calendar\">\r\n");
      out.write("\t\t<caption>\r\n");
      out.write("\t\t\t<a href=\"calendar.jsp?year=");
      out.print(year - 1);
      out.write("&month=");
      out.print(month);
      out.write("\">◁</a> <a\r\n");
      out.write("\t\t\t\thref=\"calendar.jsp?year=");
      out.print(year);
      out.write("&month=");
      out.print(month - 1);
      out.write("\">◀</a> <span\r\n");
      out.write("\t\t\t\tclass=\"y\">");
      out.print(year);
      out.write("</span>년 <span class=\"m\">");
      out.print(month);
      out.write("</span>월 <a\r\n");
      out.write("\t\t\t\thref=\"calendar.jsp?year=");
      out.print(year);
      out.write("&month=");
      out.print(month + 1);
      out.write("\">▶</a> <a\r\n");
      out.write("\t\t\t\thref=\"calendar.jsp?year=");
      out.print(year + 1);
      out.write("&month=");
      out.print(month);
      out.write("\">▷</a>\r\n");
      out.write("\t\t</caption>\r\n");
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>일</th>\r\n");
      out.write("\t\t\t<th>월</th>\r\n");
      out.write("\t\t\t<th>화</th>\r\n");
      out.write("\t\t\t<th>수</th>\r\n");
      out.write("\t\t\t<th>목</th>\r\n");
      out.write("\t\t\t<th>금</th>\r\n");
      out.write("\t\t\t<th>토</th>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");

			for (int i = 0; i < dayOfWeek - 1; i++) {//공백(&nbsp;)/일요일이 1이라서
				out.println("<td>&nbsp;</td>");
			}

			for (int i = 1; i <= lastDay; i++) {
		
      out.write("\r\n");
      out.write("\t\t<td><a class=\"countview\"\r\n");
      out.write("\t\t\thref=\"calendar.do?command=list&year=");
      out.print(year);
      out.write("&month=");
      out.print(month);
      out.write("&date=");
      out.print(i);
      out.write("\"\r\n");
      out.write("\t\t\tstyle=\"color: ");
      out.print(Util.fontColor(i, dayOfWeek));
      out.write('"');
      out.write('>');
      out.print(i);
      out.write("</a> <a\r\n");
      out.write("\t\t\thref=\"insertcalboard.jsp?year=");
      out.print(year);
      out.write("&month=");
      out.print(month);
      out.write("&date=");
      out.print(i);
      out.write("&lastday=");
      out.print(lastDay);
      out.write("\">\r\n");
      out.write("\t\t\t\t<img alt=\"일정추가\" src=\"img/pen.png\" style=\"width: 10px; height: 10px;\">\r\n");
      out.write("\t\t</a>\r\n");
      out.write("\t\t\t<div class=\"clist\">\r\n");
      out.write("\t\t\t\t");
      out.print(Util.getCalView(i, clist));
      out.write("\r\n");
      out.write("\t\t\t</div></td>\r\n");
      out.write("\r\n");
      out.write("\t\t");

			if ((dayOfWeek - 1 + i) % 7 == 0) {
					out.println("<tr></tr>");
				}
			}

			for (int i = 0; i < (7 - (dayOfWeek - 1 + lastDay) % 7) % 7; i++) {//dayOfWeek-1+lastDay)%7=마지막 날의 요일

				out.println("<td>&nbsp;</td>");
			}
		
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
